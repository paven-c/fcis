<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.paven</groupId>
  <artifactId>fcis</artifactId>
  <version>0.0.1</version>
  <packaging>pom</packaging>

  <modules>
    <module>app-servers</module>
    <module>business-modules</module>
    <module>basic-components</module>
    <module>basic-dependencies</module>
  </modules>

  <properties>
    <java.version>17</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
    <maven-surefire-plugin.version>3.2.2</maven-surefire-plugin.version>
    <maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
    <lombok.version>1.18.30</lombok.version>
    <spring.boot.version>3.2.2</spring.boot.version>
    <mapstruct.version>1.5.5.Final</mapstruct.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <druid.version>1.1.10</druid.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.paven</groupId>
        <artifactId>basic-dependencies</artifactId>
        <version>0.0.1</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <pluginManagement>
      <plugins>
        <!-- maven-surefire-plugin 插件，用于运行单元测试。 -->
        <!-- 注意，需要使用 3.0.X+，因为要支持 Junit 5 版本 -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven-surefire-plugin.version}</version>
        </plugin>
        <!-- maven-compiler-plugin 插件，解决 spring-boot-configuration-processor + Lombok + MapStruct 组合 -->
        <!-- https://stackoverflow.com/questions/33483697/re-run-spring-boot-configuration-annotation-processor-to-update-generated-metada -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven-compiler-plugin.version}</version>
          <configuration>
            <annotationProcessorPaths>
              <path>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-configuration-processor</artifactId>
                <version>${spring.boot.version}</version>
              </path>
              <path>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
              </path>
              <path>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct-processor</artifactId>
                <version>${mapstruct.version}</version>
              </path>
            </annotationProcessorPaths>
            <debug>false</debug>
            <compilerArgs>
              <arg>-parameters</arg>
            </compilerArgs>
          </configuration>
        </plugin>

        <plugin>
          <groupId>com.spotify</groupId>
          <artifactId>docker-maven-plugin</artifactId>
          <version>1.0.0</version>
          <!-- configuration标签里面的内容用来生成dockerfile  -->
          <configuration>
            <!--  镜像名称  -->
            <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
            <!-- 只顶你标签 -->
            <imageTags>
              <imageTag>latest</imageTag>
            </imageTags>
            <!-- 基础镜像 jdk1.8 -->
            <baseImage>java</baseImage>
            <!--  制作者提供的个人信息  -->
            <maintainer>docker_maven docker_maven@email.com</maintainer>
            <!--  切换到/root工作目录 -->
            <workdir>/ROOT</workdir>
            <cmd>["java", "-version"]</cmd>
            <entryPoint>["java","-jar","${project.build.finalName}.jar"]</entryPoint>
            <!-- 指定远程docker的 api地址 -->
            <dockerHost>http://124.222.108.50:2375</dockerHost>

            <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
            <resources>
              <resource>
                <targetPath>/ROOT</targetPath>
                <!-- 用于指定需要复制的根目录， ${project.build.directory}表示target目录-->
                <directory>${project.build.directory}</directory>
                <!-- 用于指定需要复制的文件， ${project.build.finalName}.jar指的是打包后的jar包文件-->
                <include>${project.build.finalName}.jar</include>
              </resource>
            </resources>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

</project>
